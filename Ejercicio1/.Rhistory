library(readr)
library(dplyr)
library(lubridate) #Fechas y horas
library(tidyr) #spread
#graficas
library(ggplot2)
library(gridExtra)
library(tseries)
#cluster
library(animation)
library(factoextra)
#test
library(funtimes)
#Prueba para tendencia en series de tiempo.
test_tend_lin<-function(dataset){
p_values<-NULL
ar_order<-NULL
ar_coef<-NULL
for(i in 1:ncol(dataset)){
#print(i)
dat_ts<-ts(dataset[,i]) #seleccionar serie
aux<-notrend_test(dat_ts) #Prueba tendencia
p_values<-c(p_values,aux$p.value) #Obtener valor p
ar_order<-c(ar_order,aux[["estimate"]][["AR_order"]]) #Obtener AR_order
ar_coef<-c(ar_coef,mean(aux[["estimate"]][["AR_coefficients"]])) #Obtener phi
}
final_v<-list(p_values,ar_order,ar_coef) #lista con todos los valores obtenidos
final_v<- as.data.frame(final_v) #convertir a df
names(final_v)<-c("p_values","AR_order","AR_coef")
final_v$Estacion<- colnames(dataset) # Agregar número de estación
return(final_v)
}
dataset <- read_csv("csv_files/dataset.csv")
#cambiar nome de columna, fecha Arribo por facilidad de manejo
names(dataset)[names(dataset) == 'Fecha Arribo'] <-'Fecha_Arribo'
#Crear variable de hora de retiro como factor y variable de dia de la semana
dataset$Hora_Retiro_fac <- as.factor(hour(dataset$Hora_Retiro))
dataset$Dia_Retiro <- as.factor(wday(dataset$Fecha_Retiro, label = TRUE))
#Conteo de retiros por día, hora
e1<-dataset %>% count(Hora_Retiro_fac,Dia_Retiro)
head(e1 %>% arrange(desc(n)),5)
#Conteo de retiros por horas
e2<- dataset %>% count(Hora=Hora_Retiro_fac, sort = TRUE)
head(e2,5)
e2$variable<-"retiros"
#Crear variable de hora de arribo como factor y variable de dia de la semana
dataset$HoraArribo_fac <- as.factor(hour(dataset$Hora_Arribo))
dataset$DiaArribo <- as.factor(wday(dataset$Fecha_Arribo, label = TRUE))
#Conteo de arribos por día, hora
d1<-dataset %>% count(HoraArribo_fac,DiaArribo)
head(d1 %>% arrange(desc(n)),5)
#Conteo de retiros por horas
d2<- dataset %>% count(Hora=HoraArribo_fac, sort = TRUE)
head(d2,5)
d2$variable<-"arribo"
#Unir datos de afluencia
horas<-rbind(d2,e2)
#Gráfica de afluencia por horas
g4<-ggplot(horas, aes(x=as.factor(Hora), y=n, fill=variable)) +geom_bar(stat='identity', position='dodge')+theme_bw()+ggtitle(("Afluencia por hora para retiros/arribos"))
#Gráfica de afluecia de Retiros por día/Hora
f1<-ggplot(e1,aes(x=Hora_Retiro_fac, y=n, color=Dia_Retiro))+ geom_point(aes(group= Dia_Retiro)) +geom_line(aes(group= Dia_Retiro))+ggtitle("Retiros por Dia/Hora")+xlab("Hora de Retiro")+ylab("Recuento")+scale_colour_hue(labels=c('Domingo','Lunes','Martes','Miercoles','Jueves','Viernes','Sabado'))+theme_bw()
#Gráfica de afluecia de Arribos por día/Hora
g1<-ggplot(d1,aes(x=HoraArribo_fac, y=n, color=DiaArribo))+ geom_point(aes(group= DiaArribo)) +geom_line(aes(group= DiaArribo))+ggtitle("Arribos por Dia/Hora")+xlab("Hora de Arribo")+ylab("Recuento")+scale_colour_hue(labels=c('Domingo','Lunes','Martes','Miercoles','Jueves','Viernes','Sabado'))+theme_bw()
g4
grid.arrange(f1,g1)
#Contar usuarios en estación retiro
Retiro_count<-dplyr::count(dataset, Ciclo_Estacion_Retiro, sort = TRUE)
#seleccionamos las 10 estaciones con más Retiros
Retiro_count<-head(Retiro_count,10)$Ciclo_Estacion_Retiro
#Obtener datos de esas estaciones
Retiro_popular<-dataset %>% filter(Ciclo_Estacion_Retiro %in% Retiro_count)
#Conteos por grupos
Retiro_popular<-Retiro_popular %>% count(Ciclo_Estacion_Retiro,Hora_Retiro_fac)
#Convertir valor a factor, ordenar por estaciones con mayor afluencia
Retiro_popular$Ciclo_Estacion_Retiro<-factor(Retiro_popular$Ciclo_Estacion_Retiro, levels =Retiro_count)
#Graficar
f3<-ggplot(Retiro_popular, aes( as.factor(Ciclo_Estacion_Retiro),Hora_Retiro_fac)) +
geom_tile(aes(fill = n), color = "blue") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("Dia_Retiro") +
xlab("Ciclo_estacion") +
theme_bw() +
labs(fill = "n") +ggtitle("Afluencia en estaciones de Retiro por hora",subtitle = "Estaciones ordenadas de mayor a menor afluencia")
#Contar usuarios en estación arribo
Arribo_count<-dplyr::count(dataset, Ciclo_EstacionArribo, sort = TRUE)
#seleccionamos las 10 estaciones con más arribos
Arribo_count<-head(Arribo_count,10)$Ciclo_EstacionArribo
#Obtener datos de esas estaciones
Arribo_popular<-dataset %>% filter(Ciclo_EstacionArribo %in% Arribo_count)
#Conteos por grupos
Arribo_popular<-Arribo_popular %>% count(Ciclo_EstacionArribo,HoraArribo_fac)
#Convertir valor a factor, ordenar por estaciones con mayor afluencia
Arribo_popular$Ciclo_EstacionArribo<-factor(Arribo_popular$Ciclo_EstacionArribo, levels =Arribo_count)
#Graficar
g3<-ggplot(Arribo_popular, aes( as.factor(Ciclo_EstacionArribo),HoraArribo_fac)) +
geom_tile(aes(fill = n), color = "blue") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("DiaArribo") +
xlab("Ciclo_estacion") +
theme_bw() +
labs(fill = "n") +ggtitle("Afluencia en estaciones de arribo por hora",subtitle = "Estaciones ordenadas de mayor a menor afluencia")
f3
g3
#Verificar las estaciones que tenemos
dataset%>%
distinct(Ciclo_Estacion_Retiro) %>%
count()
dataset%>%
distinct(Ciclo_EstacionArribo) %>%
count()
#De dondé retiran las bicis y a dondé llegan
bike_use_path <- dataset%>%
group_by(Ciclo_Estacion_Retiro, Ciclo_EstacionArribo) %>%
count() %>%
ungroup()
#De que estaciones retiran más bicis
bike_use_retiro <- dataset%>%
group_by(Ciclo_Estacion_Retiro) %>%
count() %>%
ungroup() %>%
arrange(-n)
#A qué estaciones arriban más bicis
bike_use_arribo <- dataset%>%
group_by(Ciclo_EstacionArribo) %>%
count() %>%
ungroup() %>%
arrange(-n)
bu2 <- bike_use_retiro %>%
top_n(30) %>%
ggplot() +
geom_col(mapping = aes(y=as.factor(Ciclo_Estacion_Retiro) %>%
reorder(n),
x=n),
fill = 'steelblue',
alpha = 0.8,
color = 'black') +
xlab('Número de entradas de bicicletas') +
ylab('id de estación') +
ggtitle('Top estaciones concurridas (retiro)')
cu2 <- bike_use_retiro %>%
top_n(-30) %>%
ggplot() +
geom_col(mapping = aes(y=as.factor(Ciclo_Estacion_Retiro) %>%
reorder(-n),
x=n),
fill = 'steelblue',
alpha = 0.8,
color = 'black') +
xlab('Número de entradas de bicicletas') +
ylab('id de estación') +
ggtitle('Estaciones menos concurridas (retiro)')
grid.arrange(bu2, cu2, ncol = 2)
#Más concurridas
bu1<-bike_use_arribo %>%
top_n(30) %>%
ggplot() +
geom_col(mapping = aes(y=as.factor(Ciclo_EstacionArribo) %>%
reorder(n),
x=n),
fill = 'steelblue',
alpha = 0.8,
color = 'black') +
xlab('Número de entradas de bicicletas') +
ylab('id de estación') +
ggtitle('Top estaciones concurridas (arribo)')+ theme_bw()
#Menos concurridas
cu1<-bike_use_arribo %>%
top_n(-30) %>%
ggplot() +
geom_col(mapping = aes(y=as.factor(Ciclo_EstacionArribo) %>%
reorder(-n),
x=n),
fill = 'steelblue',
alpha = 0.8,
color = 'black') +
xlab('Número de entradas de bicicletas') +
ylab('id de estación') +
ggtitle('Estaciones menos concurridas (arribo)')+ theme_bw()
grid.arrange(bu1, cu1, ncol = 2)
#agregar variables de hora decimal
bike_tfm <-dataset %>%
mutate(hora_arribo_decimal = hms(Hora_Arribo) %>% as.numeric() %>% round(0) / 3600,
hora_arribo_decimal = hora_arribo_decimal %>% round(0),
hora_retiro_decimal = hms(Hora_Retiro) %>% as.numeric() %>% round(0) / 3600,
hora_retiro_decimal = hora_retiro_decimal %>% round(0))
bike_tfm$Genero_Usuario[is.na(bike_tfm$Genero_Usuario)] = 'NA_genero'
#Separar arribos de retiros
bike_tfm_arribo <- bike_tfm %>%
select(Ciclo_EstacionArribo, Genero_Usuario, Edad_Usuario, Fecha_Arribo, DiaArribo, hora_arribo_decimal)
bike_tfm_retiro <- bike_tfm %>%
select(Ciclo_Estacion_Retiro, Genero_Usuario, Edad_Usuario, Fecha_Retiro, Dia_Retiro, hora_retiro_decimal)
#               seccion arribos
# calculando cantidad total de arribos por estacion
bike_tfm_arribo_total_arribos <- bike_tfm_arribo %>%
group_by(Ciclo_EstacionArribo) %>%
summarize(total_arribos = n()) %>%
ungroup()
# calculando la hora promedio de arribos por estacion
bike_tfm_arribo_promedio_hora <- bike_tfm_arribo %>%
group_by(Ciclo_EstacionArribo) %>%
summarize(promedio_hora_arribo = mean(hora_arribo_decimal)) %>%
ungroup()
# caclculando la cantidad de arribos efectuado en fin de semana
bike_tfm_arribo_porcentake_weekend <- bike_tfm_arribo %>%
mutate(is_weekend = if_else(DiaArribo == 'Sun' |
DiaArribo == 'Sat' |
DiaArribo == 'Fri',
1,
0)) %>%
group_by(Ciclo_EstacionArribo) %>%
summarize(porcentaje_arribos_weekend = sum(is_weekend) / n()) %>%
ungroup()
bike_tfm_arribo_porcentake_weekend %>%
ggplot() +
geom_histogram(mapping = aes(x=porcentaje_arribos_weekend),
fill = 'forestgreen',
color = 'black',
alpha = 0.8)+ ggtitle("Distribución de porcentaje de arribos en fin de semana")+theme_bw()
library(plyr)
gen<- dataset %>% select("Ciclo_Estacion_Retiro","Genero_Usuario")
# calculando la cantidad de personas en base a genero que interactuan en cada estacion
M<-as.data.frame(table(gen)) %>% filter(Genero_Usuario == "M")
M<- M %>% select(Ciclo_Estacion_Retiro,Freq)
names(M)<- c("Estación","Genero M")
F<- as.data.frame(table(gen)) %>% filter(Genero_Usuario == "F")
F<- F %>% select(Ciclo_Estacion_Retiro,Freq)
names(F)<- c("Estación","Genero F")
#calculando la edad promedio de usuarios que interactuan en cada estacion
ed<- ddply(dataset, .(Ciclo_Estacion_Retiro), summarize,  EdadPromedio=mean(Edad_Usuario))
names(ed)<- c("Estación","Edad Promedio")
#calculando arribos en cada estacion
Ar<-as.data.frame(table(dataset$Ciclo_EstacionArribo))
names(Ar)<- c("Estación","Arribos")
#calculando retiros en cada estacion
Re<-as.data.frame(table(dataset$Ciclo_Estacion_Retiro))
names(Re)<- c("Estación","Retiros")
dataf<- Reduce(function(x, y) merge(x, y, all=TRUE), list(Re,Ar,M,F,ed))
#guardar archivo
#dataf %>% write_csv('csv_files/dataset-features-clusters.csv')
#Quitar columna de estaciones
dataf<-dataf[,-1]
dataf
df <- scale(dataf)
head(df)
set.seed(2345)
library(animation)
kmeans.ani(df, 3)
fviz_nbclust(x = df, FUNcluster = kmeans, method = "wss", k.max = 15,
diss = get_dist(df, method = "euclidean"), nstart = 50)
k3 <- kmeans(df, centers = 3, nstart = 25)
str(k3)
fviz_cluster(k3, data = df)
#Vamos a considerar el uso total(arribos/retiros) de cada estación por día
#contar arribos
a1<- dataset %>% select("Ciclo_EstacionArribo","Fecha_Arribo")
a1<-as.data.frame(table(a1))
names(a1)<- c("Estacion","t","n")
#contar retiros
a2<- dataset %>% select("Ciclo_Estacion_Retiro","Fecha_Arribo")
a2<-as.data.frame(table(a2))
names(a2)<- c("Estacion","t","n")
#Unir arribos y retiros
uso_df<-merge(x=a1,y=a2,by=c("Estacion","t"),all=TRUE)
#Replace nan's with 0'
uso_df[is.na(uso_df)] <- 0
#print(sum(is.na(a)))
uso_df$n<- uso_df$n.x+uso_df$n.y
uso_df<-uso_df[,c("t","Estacion", "n")]
#regresar t a date
uso_df$t<-as.Date(uso_df$t, format= "%Y-%m-%d")
#Dejar solo datos después de Agosto, podríamos tener retiros en fechas anteriores
uso_df<-uso_df %>% filter(t>=as_date("2021-08-01") & t<=as_date("2021-10-31"))
#Convertir cada estación en una columna
uso_df_sp<-spread(uso_df,key = Estacion,value = n)
uso_df_sp[is.na(uso_df_sp)]<-0
#H0: No existe tendecia
#H1: Tendencia lineal
#Asumiendo que las series temporales pueden estar autocorrelacionadas, aplicamos la versión sieve-bootstrap de la prueba t.
#Prueba de tendencia en series de tiempo
uso_df_ten<-test_tend_lin(uso_df_sp[,2:ncol(uso_df_sp)])
#agregar varible de estaciones
uso_df_ten$Estacion<-colnames(uso_df_sp[,2:ncol(uso_df_sp)])
uso_df_ten_sig<-uso_df_ten %>% filter(p_values<=.05)
#Obtenemos las 10 con mayor proporción de cambio
tend_alta<-uso_df_ten %>% arrange(desc(AR_coef)) %>% head(10)
cat("Estaciones con tendencia a la alta:",tend_alta$Estacion)
#Obtenemos las 10 con menor proporción de cambio
tend_baja<-uso_df_ten%>% arrange(AR_coef) %>% head(10)
cat("Estaciones con tendencia a la baja:",tend_baja$Estacion)
#Gráfica de estaciones con tendencia a la alta
uso_ten_alta<-uso_df %>% filter(Estacion %in% tend_alta$Estacion)
ggplot(uso_ten_alta,aes(x=t,y=n,group=Estacion)) + geom_line()+ facet_wrap(~ Estacion)
#Gráfica de estaciones con tendencia a la baja
uso_ten_baja<-uso_df %>% filter(Estacion %in% tend_baja$Estacion)
ggplot(uso_ten_baja,aes(x=t,y=n,group=Estacion)) + geom_line()+  facet_wrap(~ Estacion)
